{"compilerOptions":{"css":"external","dev":true,"hydratable":true},"configFile":false,"extensions":[".svelte"],"preprocess":[{"markup":"async ({ content, filename }) => {\n        if (transformers.replace) {\n            const transformed = await (0, exports.transform)('replace', transformers.replace, {\n                content,\n                markup: content,\n                filename,\n            });\n            content = transformed.code;\n        }\n        return (0, markup_1.transformMarkup)({ content, filename }, markupTransformer, {\n            // we only pass the markupTagName because the rest of options\n            // is fetched internally by the `markupTransformer`\n            markupTagName,\n        });\n    }","script":"async ({ content, attributes, markup: fullMarkup, filename, }) => {\n        const transformResult = await scriptTransformer({\n            content,\n            attributes,\n            markup: fullMarkup,\n            filename,\n        });\n        let { code, map, dependencies, diagnostics } = transformResult;\n        if (transformers.babel) {\n            const transformed = await (0, exports.transform)('babel', getTransformerOptions('babel'), { content: code, markup: fullMarkup, map, filename, attributes });\n            code = transformed.code;\n            map = transformed.map;\n            dependencies = (0, utils_1.concat)(dependencies, transformed.dependencies);\n            diagnostics = (0, utils_1.concat)(diagnostics, transformed.diagnostics);\n        }\n        return { code, map, dependencies, diagnostics };\n    }","style":"async ({ content, attributes, markup: fullMarkup, filename, }) => {\n        const transformResult = await cssTransformer({\n            content,\n            attributes,\n            markup: fullMarkup,\n            filename,\n        });\n        let { code, map, dependencies } = transformResult;\n        const hasPostcss = await (0, utils_1.hasDepInstalled)('postcss');\n        // istanbul ignore else\n        if (hasPostcss) {\n            if (transformers.postcss) {\n                const { alias, lang } = (0, language_1.getLanguage)(attributes);\n                const postcssOptions = getTransformerOptions('postcss', (0, language_1.isAliasOf)(alias, lang) ? alias : null, \n                // todo: this seems wrong and ugly\n                { ignoreAliasOverride: true });\n                const transformed = await (0, exports.transform)('postcss', postcssOptions, {\n                    content: code,\n                    markup: fullMarkup,\n                    map,\n                    filename,\n                    attributes,\n                });\n                code = transformed.code;\n                map = transformed.map;\n                dependencies = (0, utils_1.concat)(dependencies, transformed.dependencies);\n            }\n            const transformed = await (0, exports.transform)('globalStyle', getTransformerOptions('globalStyle'), { content: code, markup: fullMarkup, map, filename, attributes });\n            code = transformed.code;\n            map = transformed.map;\n        }\n        else if ('global' in attributes) {\n            console.warn(`[svelte-preprocess] 'global' attribute found, but 'postcss' is not installed. 'postcss' is used to walk through the CSS and transform any necessary selector.`);\n        }\n        return { code, map, dependencies };\n    }"},{"script":"script({filename, content}) {\n      if (filename && !/node_modules/.test(filename)) {\n        const code = walkAndReplace({\n          type: \"script\",\n          content,\n          filename\n        }, ({node: node2}, replaceContent) => {\n          if (node2.type === \"ImportDeclaration\") {\n            switch (node2.source.value) {\n              case CARBON_SVELTE.components:\n                replaceContent(node2, node2.specifiers.map(({local, imported}) => {\n                  if (imported.name in Components.components) {\n                    return `import ${local.name} from \"${Components.components[imported.name].path}\";`;\n                  }\n                  console.warn(`[carbon:optimizeImports] ${imported.name} is not a valid Carbon component`);\n                  return \"\";\n                }).join(\"\\n\"));\n                break;\n              case CARBON_SVELTE.icons:\n                replaceContent(node2, node2.specifiers.map(({local, imported}) => {\n                  if (CARBON_VERSIONS[CARBON_SVELTE.icons] === \"11\" || CARBON_VERSIONS[CARBON_SVELTE.icons] === \"12\") {\n                    return `import ${local.name} from \"${CARBON_SVELTE.icons}/lib/${imported.name}.svelte\";`;\n                  }\n                  return `import ${local.name} from \"${CARBON_SVELTE.icons}/lib/${imported.name}/${imported.name}.svelte\";`;\n                }).join(\"\\n\"));\n                break;\n              case CARBON_SVELTE.pictograms:\n                replaceContent(node2, node2.specifiers.map(({local, imported}) => {\n                  if (CARBON_VERSIONS[CARBON_SVELTE.pictograms] === \"11\" || CARBON_VERSIONS[CARBON_SVELTE.pictograms] === \"12\") {\n                    return `import ${local.name} from \"${CARBON_SVELTE.pictograms}/lib/${imported.name}.svelte\";`;\n                  }\n                  return `import ${local.name} from \"${CARBON_SVELTE.pictograms}/lib/${imported.name}/${imported.name}.svelte\";`;\n                }).join(\"\\n\"));\n                break;\n            }\n          }\n        });\n        return {code};\n      }\n      return {code: content};\n    }"},{"script":"({ content, filename }) => {\n\t\tif (!filename) return;\n\n\t\tconst basename = path.basename(filename);\n\t\tif (basename.startsWith('+page.') || basename.startsWith('+layout.')) {\n\t\t\tconst match = content.match(options_regex);\n\t\t\tif (match) {\n\t\t\t\tconst fixed = basename.replace('.svelte', '(.server).js/ts');\n\n\t\t\t\tconst message =\n\t\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\n\t\t\t\t\t`\\`${match[1]}\\` will be ignored — move it to ${fixed} instead. See https://kit.svelte.dev/docs/page-options for more information.`;\n\n\t\t\t\tif (!warned.has(message)) {\n\t\t\t\t\tconsole.log(message);\n\t\t\t\t\twarned.add(message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","markup":"({ content, filename }) => {\n\t\tif (!filename) return;\n\n\t\tconst basename = path.basename(filename);\n\t\tconst has_children =\n\t\t\tcontent.includes('<slot') || (isSvelte5Plus() && content.includes('{@render'));\n\n\t\tif (basename.startsWith('+layout.') && !has_children) {\n\t\t\tconst message =\n\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\n\t\t\t\t`\\`<slot />\\`${isSvelte5Plus() ? ' or `{@render ...}` tag' : ''}` +\n\t\t\t\t' missing — inner content will not be rendered';\n\n\t\t\tif (!warned.has(message)) {\n\t\t\t\tconsole.log(message);\n\t\t\t\twarned.add(message);\n\t\t\t}\n\t\t}\n\t}"}]}