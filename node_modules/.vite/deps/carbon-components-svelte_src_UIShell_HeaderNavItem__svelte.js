import "./chunk-X7HCJ7ZS.js";
import {
  SvelteComponentDev,
  add_location,
  append_hydration_dev,
  assign,
  attr_dev,
  binding_callbacks,
  bubble,
  children,
  claim_element,
  claim_text,
  compute_rest_props,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  listen_dev,
  onMount,
  run_all,
  safe_not_equal,
  set_attributes,
  set_data_dev,
  text,
  toggle_class,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-ONRLE3LR.js";
import "./chunk-TDRWH72F.js";
import "./chunk-XSLCAIPP.js";
import "./chunk-F3FYYIAV.js";

// node_modules/carbon-components-svelte/src/UIShell/HeaderNavItem.svelte
var file = "node_modules/carbon-components-svelte/src/UIShell/HeaderNavItem.svelte";
function fallback_block(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text(
        /*text*/
        ctx[2]
      );
    },
    l: function claim(nodes) {
      t = claim_text(
        nodes,
        /*text*/
        ctx[2]
      );
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*text*/
      4)
        set_data_dev(
          t,
          /*text*/
          ctx2[2]
        );
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(64:54) {text}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let li;
  let a;
  let span;
  let a_rel_value;
  let a_aria_current_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  const default_slot_or_fallback = default_slot || fallback_block(ctx);
  let a_levels = [
    { role: "menuitem" },
    { tabindex: "0" },
    { href: (
      /*href*/
      ctx[1]
    ) },
    {
      rel: a_rel_value = /*$$restProps*/
      ctx[7].target === "_blank" ? "noopener noreferrer" : void 0
    },
    {
      "aria-current": a_aria_current_value = /*isSelected*/
      ctx[3] ? "page" : void 0
    },
    /*$$restProps*/
    ctx[7]
  ];
  let a_data = {};
  for (let i = 0; i < a_levels.length; i += 1) {
    a_data = assign(a_data, a_levels[i]);
  }
  const block = {
    c: function create() {
      li = element("li");
      a = element("a");
      span = element("span");
      if (default_slot_or_fallback)
        default_slot_or_fallback.c();
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", { role: true });
      var li_nodes = children(li);
      a = claim_element(li_nodes, "A", {
        role: true,
        tabindex: true,
        href: true,
        rel: true,
        "aria-current": true
      });
      var a_nodes = children(a);
      span = claim_element(a_nodes, "SPAN", {});
      var span_nodes = children(span);
      if (default_slot_or_fallback)
        default_slot_or_fallback.l(span_nodes);
      span_nodes.forEach(detach_dev);
      a_nodes.forEach(detach_dev);
      li_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      toggle_class(span, "bx--text-truncate--end", true);
      add_location(span, file, 63, 4, 1382);
      set_attributes(a, a_data);
      toggle_class(a, "bx--header__menu-item", true);
      add_location(a, file, 40, 2, 844);
      attr_dev(li, "role", "none");
      add_location(li, file, 39, 0, 825);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, li, anchor);
      append_hydration_dev(li, a);
      append_hydration_dev(a, span);
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(span, null);
      }
      ctx[18](a);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            a,
            "click",
            /*click_handler*/
            ctx[10],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "mouseover",
            /*mouseover_handler*/
            ctx[11],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "mouseenter",
            /*mouseenter_handler*/
            ctx[12],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "mouseleave",
            /*mouseleave_handler*/
            ctx[13],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "keyup",
            /*keyup_handler*/
            ctx[14],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "keydown",
            /*keydown_handler*/
            ctx[15],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "focus",
            /*focus_handler*/
            ctx[16],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "blur",
            /*blur_handler*/
            ctx[17],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "blur",
            /*blur_handler_1*/
            ctx[19],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/
        4)) {
          default_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      set_attributes(a, a_data = get_spread_update(a_levels, [
        { role: "menuitem" },
        { tabindex: "0" },
        (!current || dirty & /*href*/
        2) && { href: (
          /*href*/
          ctx2[1]
        ) },
        (!current || dirty & /*$$restProps*/
        128 && a_rel_value !== (a_rel_value = /*$$restProps*/
        ctx2[7].target === "_blank" ? "noopener noreferrer" : void 0)) && { rel: a_rel_value },
        (!current || dirty & /*isSelected*/
        8 && a_aria_current_value !== (a_aria_current_value = /*isSelected*/
        ctx2[3] ? "page" : void 0)) && { "aria-current": a_aria_current_value },
        dirty & /*$$restProps*/
        128 && /*$$restProps*/
        ctx2[7]
      ]));
      toggle_class(a, "bx--header__menu-item", true);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(li);
      }
      if (default_slot_or_fallback)
        default_slot_or_fallback.d(detaching);
      ctx[18](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["href", "text", "isSelected", "ref"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("HeaderNavItem", slots, ["default"]);
  let { href = void 0 } = $$props;
  let { text: text2 = void 0 } = $$props;
  let { isSelected = false } = $$props;
  let { ref = null } = $$props;
  const id = "ccs-" + Math.random().toString(36);
  const ctx = getContext("HeaderNavMenu");
  let selectedItemIds = [];
  const unsubSelectedItems = ctx == null ? void 0 : ctx.selectedItems.subscribe((_selectedItems) => {
    $$invalidate(4, selectedItemIds = Object.keys(_selectedItems));
  });
  onMount(() => {
    return () => {
      if (unsubSelectedItems)
        unsubSelectedItems();
    };
  });
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseenter_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseleave_handler(event) {
    bubble.call(this, $$self, event);
  }
  function keyup_handler(event) {
    bubble.call(this, $$self, event);
  }
  function keydown_handler(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  function a_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(0, ref);
    });
  }
  const blur_handler_1 = () => {
    if (selectedItemIds.indexOf(id) === selectedItemIds.length - 1) {
      ctx == null ? void 0 : ctx.closeMenu();
    }
  };
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("href" in $$new_props)
      $$invalidate(1, href = $$new_props.href);
    if ("text" in $$new_props)
      $$invalidate(2, text2 = $$new_props.text);
    if ("isSelected" in $$new_props)
      $$invalidate(3, isSelected = $$new_props.isSelected);
    if ("ref" in $$new_props)
      $$invalidate(0, ref = $$new_props.ref);
    if ("$$scope" in $$new_props)
      $$invalidate(8, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    href,
    text: text2,
    isSelected,
    ref,
    getContext,
    onMount,
    id,
    ctx,
    selectedItemIds,
    unsubSelectedItems
  });
  $$self.$inject_state = ($$new_props) => {
    if ("href" in $$props)
      $$invalidate(1, href = $$new_props.href);
    if ("text" in $$props)
      $$invalidate(2, text2 = $$new_props.text);
    if ("isSelected" in $$props)
      $$invalidate(3, isSelected = $$new_props.isSelected);
    if ("ref" in $$props)
      $$invalidate(0, ref = $$new_props.ref);
    if ("selectedItemIds" in $$props)
      $$invalidate(4, selectedItemIds = $$new_props.selectedItemIds);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*isSelected*/
    8) {
      $:
        ctx == null ? void 0 : ctx.updateSelectedItems({ id, isSelected });
    }
  };
  return [
    ref,
    href,
    text2,
    isSelected,
    selectedItemIds,
    id,
    ctx,
    $$restProps,
    $$scope,
    slots,
    click_handler,
    mouseover_handler,
    mouseenter_handler,
    mouseleave_handler,
    keyup_handler,
    keydown_handler,
    focus_handler,
    blur_handler,
    a_binding,
    blur_handler_1
  ];
}
var HeaderNavItem = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { href: 1, text: 2, isSelected: 3, ref: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "HeaderNavItem",
      options,
      id: create_fragment.name
    });
  }
  get href() {
    throw new Error("<HeaderNavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set href(value) {
    throw new Error("<HeaderNavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get text() {
    throw new Error("<HeaderNavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value) {
    throw new Error("<HeaderNavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get isSelected() {
    throw new Error("<HeaderNavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set isSelected(value) {
    throw new Error("<HeaderNavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error("<HeaderNavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error("<HeaderNavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var HeaderNavItem_default = HeaderNavItem;
export {
  HeaderNavItem_default as default
};
//# sourceMappingURL=carbon-components-svelte_src_UIShell_HeaderNavItem__svelte.js.map
