import {
  ChevronDown_default
} from "./chunk-HJZIWFMJ.js";
import "./chunk-X7HCJ7ZS.js";
import {
  writable
} from "./chunk-IPC4YNSI.js";
import "./chunk-3YG4HVQA.js";
import {
  SvelteComponentDev,
  add_location,
  append_hydration_dev,
  assign,
  attr_dev,
  binding_callbacks,
  bubble,
  children,
  claim_component,
  claim_element,
  claim_space,
  claim_text,
  component_subscribe,
  compute_rest_props,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  listen_dev,
  mount_component,
  prevent_default,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  set_data_maybe_contenteditable_dev,
  set_style,
  space,
  text,
  toggle_class,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-4HN6M6VN.js";
import "./chunk-ZJ46KODL.js";
import "./chunk-2B2CG5KL.js";

// node_modules/carbon-components-svelte/src/UIShell/HeaderNavMenu.svelte
var file = "node_modules/carbon-components-svelte/src/UIShell/HeaderNavMenu.svelte";
function create_fragment(ctx) {
  let li;
  let a;
  let t0;
  let t1;
  let chevrondown;
  let t2;
  let ul;
  let current;
  let mounted;
  let dispose;
  chevrondown = new ChevronDown_default({
    props: { class: "bx--header__menu-arrow" },
    $$inline: true
  });
  let a_levels = [
    { role: "menuitem" },
    { tabindex: "0" },
    { "aria-haspopup": "menu" },
    { "aria-expanded": (
      /*expanded*/
      ctx[0]
    ) },
    { "aria-label": (
      /*text*/
      ctx[3]
    ) },
    { href: (
      /*href*/
      ctx[2]
    ) },
    /*$$restProps*/
    ctx[7]
  ];
  let a_data = {};
  for (let i = 0; i < a_levels.length; i += 1) {
    a_data = assign(a_data, a_levels[i]);
  }
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  const block = {
    c: function create() {
      li = element("li");
      a = element("a");
      t0 = text(
        /*text*/
        ctx[3]
      );
      t1 = space();
      create_component(chevrondown.$$.fragment);
      t2 = space();
      ul = element("ul");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", { role: true });
      var li_nodes = children(li);
      a = claim_element(li_nodes, "A", {
        role: true,
        tabindex: true,
        "aria-haspopup": true,
        "aria-expanded": true,
        "aria-label": true,
        href: true
      });
      var a_nodes = children(a);
      t0 = claim_text(
        a_nodes,
        /*text*/
        ctx[3]
      );
      t1 = claim_space(a_nodes);
      claim_component(chevrondown.$$.fragment, a_nodes);
      a_nodes.forEach(detach_dev);
      t2 = claim_space(li_nodes);
      ul = claim_element(li_nodes, "UL", { role: true, "aria-label": true });
      var ul_nodes = children(ul);
      if (default_slot)
        default_slot.l(ul_nodes);
      ul_nodes.forEach(detach_dev);
      li_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(a, a_data);
      toggle_class(a, "bx--header__menu-item", true);
      toggle_class(a, "bx--header__menu-title", true);
      set_style(a, "z-index", 1);
      add_location(a, file, 66, 2, 1358);
      attr_dev(ul, "role", "menu");
      attr_dev(
        ul,
        "aria-label",
        /*text*/
        ctx[3]
      );
      toggle_class(ul, "bx--header__menu", true);
      add_location(ul, file, 97, 2, 2096);
      attr_dev(li, "role", "none");
      toggle_class(li, "bx--header__submenu", true);
      toggle_class(
        li,
        "bx--header__submenu--current",
        /*isCurrentSubmenu*/
        ctx[5]
      );
      add_location(li, file, 49, 0, 996);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, li, anchor);
      append_hydration_dev(li, a);
      append_hydration_dev(a, t0);
      append_hydration_dev(a, t1);
      mount_component(chevrondown, a, null);
      ctx[20](a);
      append_hydration_dev(li, t2);
      append_hydration_dev(li, ul);
      if (default_slot) {
        default_slot.m(ul, null);
      }
      ctx[22](ul);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            window,
            "click",
            /*click_handler_1*/
            ctx[19],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "keydown",
            /*keydown_handler*/
            ctx[11],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "keydown",
            /*keydown_handler_1*/
            ctx[21],
            false,
            false,
            false,
            false
          ),
          listen_dev(a, "click", prevent_default(
            /*click_handler*/
            ctx[12]
          ), false, true, false, false),
          listen_dev(
            a,
            "mouseover",
            /*mouseover_handler*/
            ctx[13],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "mouseenter",
            /*mouseenter_handler*/
            ctx[14],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "mouseleave",
            /*mouseleave_handler*/
            ctx[15],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "keyup",
            /*keyup_handler*/
            ctx[16],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "focus",
            /*focus_handler*/
            ctx[17],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            a,
            "blur",
            /*blur_handler*/
            ctx[18],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            li,
            "click",
            /*click_handler_2*/
            ctx[23],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            li,
            "keydown",
            /*keydown_handler_2*/
            ctx[24],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (!current || dirty & /*text*/
      8)
        set_data_maybe_contenteditable_dev(
          t0,
          /*text*/
          ctx2[3],
          a_data["contenteditable"]
        );
      set_attributes(a, a_data = get_spread_update(a_levels, [
        { role: "menuitem" },
        { tabindex: "0" },
        { "aria-haspopup": "menu" },
        (!current || dirty & /*expanded*/
        1) && { "aria-expanded": (
          /*expanded*/
          ctx2[0]
        ) },
        (!current || dirty & /*text*/
        8) && { "aria-label": (
          /*text*/
          ctx2[3]
        ) },
        (!current || dirty & /*href*/
        4) && { href: (
          /*href*/
          ctx2[2]
        ) },
        dirty & /*$$restProps*/
        128 && /*$$restProps*/
        ctx2[7]
      ]));
      toggle_class(a, "bx--header__menu-item", true);
      toggle_class(a, "bx--header__menu-title", true);
      set_style(a, "z-index", 1);
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*text*/
      8) {
        attr_dev(
          ul,
          "aria-label",
          /*text*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*isCurrentSubmenu*/
      32) {
        toggle_class(
          li,
          "bx--header__submenu--current",
          /*isCurrentSubmenu*/
          ctx2[5]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(chevrondown.$$.fragment, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(chevrondown.$$.fragment, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(li);
      }
      destroy_component(chevrondown);
      ctx[20](null);
      if (default_slot)
        default_slot.d(detaching);
      ctx[22](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let isCurrentSubmenu;
  const omit_props_names = ["expanded", "href", "text", "ref"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $selectedItems;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("HeaderNavMenu", slots, ["default"]);
  let { expanded = false } = $$props;
  let { href = "/" } = $$props;
  let { text: text2 = void 0 } = $$props;
  let { ref = null } = $$props;
  const selectedItems = writable({});
  validate_store(selectedItems, "selectedItems");
  component_subscribe($$self, selectedItems, (value) => $$invalidate(8, $selectedItems = value));
  let menuRef = null;
  setContext("HeaderNavMenu", {
    selectedItems,
    updateSelectedItems(item) {
      selectedItems.update((_items) => ({ ..._items, [item.id]: item.isSelected }));
    },
    closeMenu() {
      $$invalidate(0, expanded = false);
    }
  });
  function keydown_handler(event) {
    bubble.call(this, $$self, event);
  }
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseenter_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseleave_handler(event) {
    bubble.call(this, $$self, event);
  }
  function keyup_handler(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler_1 = ({ target }) => {
    if (!ref.contains(target)) {
      $$invalidate(0, expanded = false);
    }
  };
  function a_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(1, ref);
    });
  }
  const keydown_handler_1 = (e) => {
    if (e.key === " ")
      e.preventDefault();
    if (e.key === "Enter" || e.key === " ") {
      $$invalidate(0, expanded = !expanded);
    }
  };
  function ul_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      menuRef = $$value;
      $$invalidate(4, menuRef);
    });
  }
  const click_handler_2 = (e) => {
    if (!menuRef.contains(e.target)) {
      e.preventDefault();
    }
    $$invalidate(0, expanded = !expanded);
  };
  const keydown_handler_2 = (e) => {
    if (e.key === "Enter") {
      e.stopPropagation();
      $$invalidate(0, expanded = !expanded);
    }
  };
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("expanded" in $$new_props)
      $$invalidate(0, expanded = $$new_props.expanded);
    if ("href" in $$new_props)
      $$invalidate(2, href = $$new_props.href);
    if ("text" in $$new_props)
      $$invalidate(3, text2 = $$new_props.text);
    if ("ref" in $$new_props)
      $$invalidate(1, ref = $$new_props.ref);
    if ("$$scope" in $$new_props)
      $$invalidate(9, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    expanded,
    href,
    text: text2,
    ref,
    setContext,
    writable,
    ChevronDown: ChevronDown_default,
    selectedItems,
    menuRef,
    isCurrentSubmenu,
    $selectedItems
  });
  $$self.$inject_state = ($$new_props) => {
    if ("expanded" in $$props)
      $$invalidate(0, expanded = $$new_props.expanded);
    if ("href" in $$props)
      $$invalidate(2, href = $$new_props.href);
    if ("text" in $$props)
      $$invalidate(3, text2 = $$new_props.text);
    if ("ref" in $$props)
      $$invalidate(1, ref = $$new_props.ref);
    if ("menuRef" in $$props)
      $$invalidate(4, menuRef = $$new_props.menuRef);
    if ("isCurrentSubmenu" in $$props)
      $$invalidate(5, isCurrentSubmenu = $$new_props.isCurrentSubmenu);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$selectedItems*/
    256) {
      $:
        $$invalidate(5, isCurrentSubmenu = Object.values($selectedItems).filter(Boolean).length > 0);
    }
  };
  return [
    expanded,
    ref,
    href,
    text2,
    menuRef,
    isCurrentSubmenu,
    selectedItems,
    $$restProps,
    $selectedItems,
    $$scope,
    slots,
    keydown_handler,
    click_handler,
    mouseover_handler,
    mouseenter_handler,
    mouseleave_handler,
    keyup_handler,
    focus_handler,
    blur_handler,
    click_handler_1,
    a_binding,
    keydown_handler_1,
    ul_binding,
    click_handler_2,
    keydown_handler_2
  ];
}
var HeaderNavMenu = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { expanded: 0, href: 2, text: 3, ref: 1 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "HeaderNavMenu",
      options,
      id: create_fragment.name
    });
  }
  get expanded() {
    throw new Error("<HeaderNavMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set expanded(value) {
    throw new Error("<HeaderNavMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get href() {
    throw new Error("<HeaderNavMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set href(value) {
    throw new Error("<HeaderNavMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get text() {
    throw new Error("<HeaderNavMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value) {
    throw new Error("<HeaderNavMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error("<HeaderNavMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error("<HeaderNavMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var HeaderNavMenu_default = HeaderNavMenu;
export {
  HeaderNavMenu_default as default
};
//# sourceMappingURL=carbon-components-svelte_src_UIShell_HeaderNavMenu__svelte.js.map
