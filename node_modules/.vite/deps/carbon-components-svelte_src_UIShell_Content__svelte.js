import {
  isSideNavCollapsed,
  isSideNavRail
} from "./chunk-HKNGWITP.js";
import "./chunk-IPC4YNSI.js";
import "./chunk-3YG4HVQA.js";
import {
  SvelteComponentDev,
  add_location,
  assign,
  children,
  claim_element,
  component_subscribe,
  compute_rest_props,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  safe_not_equal,
  set_attributes,
  set_style,
  toggle_class,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-4HN6M6VN.js";
import "./chunk-ZJ46KODL.js";
import "./chunk-2B2CG5KL.js";

// node_modules/carbon-components-svelte/src/UIShell/Content.svelte
var file = "node_modules/carbon-components-svelte/src/UIShell/Content.svelte";
function create_fragment(ctx) {
  let main;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  let main_levels = [
    { id: (
      /*id*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[2]
  ];
  let main_data = {};
  for (let i = 0; i < main_levels.length; i += 1) {
    main_data = assign(main_data, main_levels[i]);
  }
  const block = {
    c: function create() {
      main = element("main");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      main = claim_element(nodes, "MAIN", { id: true });
      var main_nodes = children(main);
      if (default_slot)
        default_slot.l(main_nodes);
      main_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(main, main_data);
      toggle_class(main, "bx--content", true);
      set_style(
        main,
        "margin-left",
        /*unsetLeftMargin*/
        ctx[1] ? 0 : void 0
      );
      add_location(main, file, 16, 0, 504);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, main, anchor);
      if (default_slot) {
        default_slot.m(main, null);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(main, main_data = get_spread_update(main_levels, [
        (!current || dirty & /*id*/
        1) && { id: (
          /*id*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        4 && /*$$restProps*/
        ctx2[2]
      ]));
      toggle_class(main, "bx--content", true);
      set_style(
        main,
        "margin-left",
        /*unsetLeftMargin*/
        ctx2[1] ? 0 : void 0
      );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(main);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let unsetLeftMargin;
  const omit_props_names = ["id"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $isSideNavRail;
  let $isSideNavCollapsed;
  validate_store(isSideNavRail, "isSideNavRail");
  component_subscribe($$self, isSideNavRail, ($$value) => $$invalidate(3, $isSideNavRail = $$value));
  validate_store(isSideNavCollapsed, "isSideNavCollapsed");
  component_subscribe($$self, isSideNavCollapsed, ($$value) => $$invalidate(4, $isSideNavCollapsed = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Content", slots, ["default"]);
  let { id = "main-content" } = $$props;
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("id" in $$new_props)
      $$invalidate(0, id = $$new_props.id);
    if ("$$scope" in $$new_props)
      $$invalidate(5, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    id,
    isSideNavCollapsed,
    isSideNavRail,
    unsetLeftMargin,
    $isSideNavRail,
    $isSideNavCollapsed
  });
  $$self.$inject_state = ($$new_props) => {
    if ("id" in $$props)
      $$invalidate(0, id = $$new_props.id);
    if ("unsetLeftMargin" in $$props)
      $$invalidate(1, unsetLeftMargin = $$new_props.unsetLeftMargin);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$isSideNavCollapsed, $isSideNavRail*/
    24) {
      $:
        $$invalidate(1, unsetLeftMargin = $isSideNavCollapsed && !$isSideNavRail);
    }
  };
  return [
    id,
    unsetLeftMargin,
    $$restProps,
    $isSideNavRail,
    $isSideNavCollapsed,
    $$scope,
    slots
  ];
}
var Content = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { id: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Content",
      options,
      id: create_fragment.name
    });
  }
  get id() {
    throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Content_default = Content;
export {
  Content_default as default
};
//# sourceMappingURL=carbon-components-svelte_src_UIShell_Content__svelte.js.map
