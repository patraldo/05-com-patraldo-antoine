{
  "version": 3,
  "sources": ["../../svelte-body/dist/actions.js", "../../svelte-body/dist/Body.svelte"],
  "sourcesContent": ["import { writable, get } from 'svelte/store';\nimport clsx, {} from 'clsx';\n/**\n * Svelte action to change class on `body`\n *\n * You can pass a string or object, or an array of combination of these. Literally anything that [clsx](https://github.com/lukeed/clsx) accepts.\n *\n * @example\n *\n *```svelte\n * <script>\n *   import { classList } from 'svelte-body';\n *\n *   let isBlue = true;\n * </script>\n *\n * <svelte:body use:classList={\"red green blue\"} />\n * <svelte:body use:classList={{ red: true, blue: isBlue }} />\n * <svelte:body use:classList={['red', isBlue && 'blue']} />\n * <svelte:body use:classList={[ 'red', { blue: isBlue } ]} />\n *```\n */\nexport const classList = (node, classString = '') => {\n    const classes = writable(clsx(classString).split(' ').filter(Boolean));\n    // When the classes store changes add the new classes\n    const unsubscribe = classes.subscribe((list) => {\n        if (Array.isArray(list) && list?.length)\n            node.classList.add(...list);\n    });\n    // Remove all classes that we added\n    const unset = () => node.classList.remove(...get(classes));\n    return {\n        update: (classString = '') => {\n            unset();\n            classes.set(clsx(classString).split(' ').filter(Boolean));\n        },\n        destroy: () => {\n            unset();\n            unsubscribe();\n        },\n    };\n};\n/**\n * Svelte action to add style on `body`. style can either be a string or an object.\n *\n * @example\n *\n *```svelte\n * <script>\n *   import { style } from 'svelte-body';\n * </script>\n *\n * <svelte:body use:style={\"background-color: blue;\"} />\n * <svelte:body use:style={{ backgroundColor: 'blue' }} />\n *```\n */\nexport const style = (node, styleData = {}) => {\n    // Pseudo Element for style parsing and keeping track of styles\n    const pseudoElement = document.createElement('div');\n    const update = (styleData = {}) => {\n        if (typeof styleData == 'string')\n            pseudoElement.style.cssText = styleData;\n        if (typeof styleData == 'object')\n            for (const [property, value] of Object.entries(styleData)) {\n                // Do a setProperty in case it's a CSS variable\n                if (property.startsWith('--')) {\n                    pseudoElement.style.setProperty(property, value);\n                }\n                else {\n                    pseudoElement.style[property] = value;\n                }\n            }\n        // Combine body's existing styles with computed ones\n        node.style.cssText = `\n\t\t\t\t\t${node.style.cssText};\n\t\t\t\t\t${pseudoElement.style.cssText};\n\t\t\t\t`;\n    };\n    // Initial Update\n    update(styleData);\n    const unset = () => {\n        // Remove the pseudoElements styles on the body\n        node.style.cssText = node.style.cssText.replace(pseudoElement.style.cssText, '');\n        // Clear pseudoElement\n        pseudoElement.style.cssText = '';\n    };\n    return {\n        update: (styleData) => {\n            unset();\n            update(styleData);\n        },\n        destroy: unset,\n    };\n};\n", null],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAsBO,IAAM,YAAY,CAAC,MAAM,cAAc,OAAO;AACjD,QAAM,UAAU,SAAS,eAAK,WAAW,EAAE,MAAM,GAAG,EAAE,OAAO,OAAO,CAAC;AAErE,QAAM,cAAc,QAAQ,UAAU,CAAC,SAAS;AAC5C,QAAI,MAAM,QAAQ,IAAI,MAAK,6BAAM;AAC7B,WAAK,UAAU,IAAI,GAAG,IAAI;AAAA,EAClC,CAAC;AAED,QAAM,QAAQ,MAAM,KAAK,UAAU,OAAO,GAAG,gBAAI,OAAO,CAAC;AACzD,SAAO;AAAA,IACH,QAAQ,CAACA,eAAc,OAAO;AAC1B,YAAM;AACN,cAAQ,IAAI,eAAKA,YAAW,EAAE,MAAM,GAAG,EAAE,OAAO,OAAO,CAAC;AAAA,IAC5D;AAAA,IACA,SAAS,MAAM;AACX,YAAM;AACN,kBAAY;AAAA,IAChB;AAAA,EACJ;AACJ;AAeO,IAAM,QAAQ,CAAC,MAAM,YAAY,CAAC,MAAM;AAE3C,QAAM,gBAAgB,SAAS,cAAc,KAAK;AAClD,QAAM,SAAS,CAACC,aAAY,CAAC,MAAM;AAC/B,QAAI,OAAOA,cAAa;AACpB,oBAAc,MAAM,UAAUA;AAClC,QAAI,OAAOA,cAAa;AACpB,iBAAW,CAAC,UAAU,KAAK,KAAK,OAAO,QAAQA,UAAS,GAAG;AAEvD,YAAI,SAAS,WAAW,IAAI,GAAG;AAC3B,wBAAc,MAAM,YAAY,UAAU,KAAK;AAAA,QACnD,OACK;AACD,wBAAc,MAAM,QAAQ,IAAI;AAAA,QACpC;AAAA,MACJ;AAEJ,SAAK,MAAM,UAAU;AAAA,OACtB,KAAK,MAAM;AAAA,OACX,cAAc,MAAM;AAAA;AAAA,EAEvB;AAEA,SAAO,SAAS;AAChB,QAAM,QAAQ,MAAM;AAEhB,SAAK,MAAM,UAAU,KAAK,MAAM,QAAQ,QAAQ,cAAc,MAAM,SAAS,EAAE;AAE/E,kBAAc,MAAM,UAAU;AAAA,EAClC;AACA,SAAO;AAAA,IACH,QAAQ,CAACA,eAAc;AACnB,YAAM;AACN,aAAOA,UAAS;AAAA,IACpB;AAAA,IACA,SAAS;AAAA,EACb;AACJ;;;;;;;;;;;;;;;;;;YCtF4B,IAAO,CAAA;UAAA,CAAA;;;;;YAAmB,IAAK,CAAA;UAAA,CAAA;;;;;;;;;;;UAA/BC,KAAO,CAAA;QAAA;;;;;;UAAmBA,KAAK,CAAA;QAAA;;;;;;;;;;;;;;;;;;;;;eANvD,UAAU,GAAE,IAAA;QAEL,OAAAC,SAAQ,GAAE,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "names": ["classString", "styleData", "ctx", "style"]
}
