import "./chunk-6A2TAOKG.js";
import {
  isSideNavCollapsed,
  isSideNavRail,
  shouldRenderHamburgerMenu
} from "./chunk-VZB4DNES.js";
import "./chunk-2XIZ5LLL.js";
import {
  SvelteComponentDev,
  add_location,
  add_render_callback,
  assign,
  children,
  claim_element,
  claim_space,
  component_subscribe,
  compute_rest_props,
  createEventDispatcher,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  listen_dev,
  onMount,
  safe_not_equal,
  set_attributes,
  set_store_value,
  set_style,
  space,
  toggle_class,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-PBX6AF7V.js";

// node_modules/carbon-components-svelte/src/UIShell/SideNav.svelte
var file = "node_modules/carbon-components-svelte/src/UIShell/SideNav.svelte";
function create_if_block(ctx) {
  let div;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {});
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      toggle_class(div, "bx--side-nav__overlay", true);
      toggle_class(
        div,
        "bx--side-nav__overlay-active",
        /*isOpen*/
        ctx[0]
      );
      set_style(
        div,
        "z-index",
        /*isOpen*/
        ctx[0] ? 6e3 : void 0
      );
      add_location(div, file, 59, 2, 1437);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (!mounted) {
        dispose = listen_dev(
          div,
          "click",
          /*click_handler*/
          ctx[11],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*isOpen*/
      1) {
        toggle_class(
          div,
          "bx--side-nav__overlay-active",
          /*isOpen*/
          ctx2[0]
        );
      }
      if (dirty & /*isOpen*/
      1) {
        set_style(
          div,
          "z-index",
          /*isOpen*/
          ctx2[0] ? 6e3 : void 0
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(57:0) {#if !fixed}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let t;
  let nav;
  let nav_aria_hidden_value;
  let current;
  let mounted;
  let dispose;
  add_render_callback(
    /*onwindowresize*/
    ctx[10]
  );
  let if_block = !/*fixed*/
  ctx[1] && create_if_block(ctx);
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  let nav_levels = [
    {
      "aria-hidden": nav_aria_hidden_value = !/*isOpen*/
      ctx[0]
    },
    { "aria-label": (
      /*ariaLabel*/
      ctx[3]
    ) },
    /*$$restProps*/
    ctx[7]
  ];
  let nav_data = {};
  for (let i = 0; i < nav_levels.length; i += 1) {
    nav_data = assign(nav_data, nav_levels[i]);
  }
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      t = space();
      nav = element("nav");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      t = claim_space(nodes);
      nav = claim_element(nodes, "NAV", { "aria-hidden": true, "aria-label": true });
      var nav_nodes = children(nav);
      if (default_slot)
        default_slot.l(nav_nodes);
      nav_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(nav, nav_data);
      toggle_class(nav, "bx--side-nav__navigation", true);
      toggle_class(nav, "bx--side-nav", true);
      toggle_class(nav, "bx--side-nav--ux", true);
      toggle_class(
        nav,
        "bx--side-nav--expanded",
        /*rail*/
        ctx[2] && /*winWidth*/
        ctx[5] >= /*expansionBreakpoint*/
        ctx[4] ? false : (
          /*isOpen*/
          ctx[0]
        )
      );
      toggle_class(nav, "bx--side-nav--collapsed", !/*isOpen*/
      ctx[0] && !/*rail*/
      ctx[2]);
      toggle_class(
        nav,
        "bx--side-nav--rail",
        /*rail*/
        ctx[2]
      );
      add_location(nav, file, 69, 0, 1683);
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, t, anchor);
      insert_hydration_dev(target, nav, anchor);
      if (default_slot) {
        default_slot.m(nav, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          window,
          "resize",
          /*onwindowresize*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (!/*fixed*/
      ctx2[1]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          if_block.m(t.parentNode, t);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(nav, nav_data = get_spread_update(nav_levels, [
        (!current || dirty & /*isOpen*/
        1 && nav_aria_hidden_value !== (nav_aria_hidden_value = !/*isOpen*/
        ctx2[0])) && { "aria-hidden": nav_aria_hidden_value },
        (!current || dirty & /*ariaLabel*/
        8) && { "aria-label": (
          /*ariaLabel*/
          ctx2[3]
        ) },
        dirty & /*$$restProps*/
        128 && /*$$restProps*/
        ctx2[7]
      ]));
      toggle_class(nav, "bx--side-nav__navigation", true);
      toggle_class(nav, "bx--side-nav", true);
      toggle_class(nav, "bx--side-nav--ux", true);
      toggle_class(
        nav,
        "bx--side-nav--expanded",
        /*rail*/
        ctx2[2] && /*winWidth*/
        ctx2[5] >= /*expansionBreakpoint*/
        ctx2[4] ? false : (
          /*isOpen*/
          ctx2[0]
        )
      );
      toggle_class(nav, "bx--side-nav--collapsed", !/*isOpen*/
      ctx2[0] && !/*rail*/
      ctx2[2]);
      toggle_class(
        nav,
        "bx--side-nav--rail",
        /*rail*/
        ctx2[2]
      );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(t);
      if (detaching)
        detach_dev(nav);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["fixed", "rail", "ariaLabel", "isOpen", "expansionBreakpoint"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $isSideNavRail;
  let $isSideNavCollapsed;
  validate_store(isSideNavRail, "isSideNavRail");
  component_subscribe($$self, isSideNavRail, ($$value) => $$invalidate(12, $isSideNavRail = $$value));
  validate_store(isSideNavCollapsed, "isSideNavCollapsed");
  component_subscribe($$self, isSideNavCollapsed, ($$value) => $$invalidate(13, $isSideNavCollapsed = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("SideNav", slots, ["default"]);
  let { fixed = false } = $$props;
  let { rail = false } = $$props;
  let { ariaLabel = void 0 } = $$props;
  let { isOpen = false } = $$props;
  let { expansionBreakpoint = 1056 } = $$props;
  const dispatch = createEventDispatcher();
  let winWidth = void 0;
  onMount(() => {
    shouldRenderHamburgerMenu.set(true);
    return () => shouldRenderHamburgerMenu.set(false);
  });
  function onwindowresize() {
    $$invalidate(5, winWidth = window.innerWidth);
  }
  const click_handler = () => {
    dispatch("click:overlay");
    $$invalidate(0, isOpen = false);
  };
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("fixed" in $$new_props)
      $$invalidate(1, fixed = $$new_props.fixed);
    if ("rail" in $$new_props)
      $$invalidate(2, rail = $$new_props.rail);
    if ("ariaLabel" in $$new_props)
      $$invalidate(3, ariaLabel = $$new_props.ariaLabel);
    if ("isOpen" in $$new_props)
      $$invalidate(0, isOpen = $$new_props.isOpen);
    if ("expansionBreakpoint" in $$new_props)
      $$invalidate(4, expansionBreakpoint = $$new_props.expansionBreakpoint);
    if ("$$scope" in $$new_props)
      $$invalidate(8, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    fixed,
    rail,
    ariaLabel,
    isOpen,
    expansionBreakpoint,
    onMount,
    createEventDispatcher,
    shouldRenderHamburgerMenu,
    isSideNavCollapsed,
    isSideNavRail,
    dispatch,
    winWidth,
    $isSideNavRail,
    $isSideNavCollapsed
  });
  $$self.$inject_state = ($$new_props) => {
    if ("fixed" in $$props)
      $$invalidate(1, fixed = $$new_props.fixed);
    if ("rail" in $$props)
      $$invalidate(2, rail = $$new_props.rail);
    if ("ariaLabel" in $$props)
      $$invalidate(3, ariaLabel = $$new_props.ariaLabel);
    if ("isOpen" in $$props)
      $$invalidate(0, isOpen = $$new_props.isOpen);
    if ("expansionBreakpoint" in $$props)
      $$invalidate(4, expansionBreakpoint = $$new_props.expansionBreakpoint);
    if ("winWidth" in $$props)
      $$invalidate(5, winWidth = $$new_props.winWidth);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*isOpen*/
    1) {
      $:
        dispatch(isOpen ? "open" : "close");
    }
    if ($$self.$$.dirty & /*isOpen*/
    1) {
      $:
        set_store_value(isSideNavCollapsed, $isSideNavCollapsed = !isOpen, $isSideNavCollapsed);
    }
    if ($$self.$$.dirty & /*rail*/
    4) {
      $:
        set_store_value(isSideNavRail, $isSideNavRail = rail, $isSideNavRail);
    }
  };
  return [
    isOpen,
    fixed,
    rail,
    ariaLabel,
    expansionBreakpoint,
    winWidth,
    dispatch,
    $$restProps,
    $$scope,
    slots,
    onwindowresize,
    click_handler
  ];
}
var SideNav = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      fixed: 1,
      rail: 2,
      ariaLabel: 3,
      isOpen: 0,
      expansionBreakpoint: 4
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "SideNav",
      options,
      id: create_fragment.name
    });
  }
  get fixed() {
    throw new Error("<SideNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fixed(value) {
    throw new Error("<SideNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rail() {
    throw new Error("<SideNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rail(value) {
    throw new Error("<SideNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ariaLabel() {
    throw new Error("<SideNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ariaLabel(value) {
    throw new Error("<SideNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get isOpen() {
    throw new Error("<SideNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set isOpen(value) {
    throw new Error("<SideNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get expansionBreakpoint() {
    throw new Error("<SideNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set expansionBreakpoint(value) {
    throw new Error("<SideNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var SideNav_default = SideNav;
export {
  SideNav_default as default
};
//# sourceMappingURL=carbon-components-svelte_src_UIShell_SideNav__svelte.js.map
